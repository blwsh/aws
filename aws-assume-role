#!/usr/bin/env python3
import os
import json
import argparse
import subprocess
import configparser
import base64
import hmac
import struct
import sys
import time

def generate_hotp(key, counter, digits=6, digest='sha1'):
    key = base64.b32decode(key.upper() + '=' * ((8 - len(key)) % 8))
    counter = struct.pack('>Q', counter)
    mac = hmac.new(key, counter, digest).digest()
    offset = mac[-1] & 0x0f
    binary = struct.unpack('>L', mac[offset:offset+4])[0] & 0x7fffffff
    return str(binary)[-digits:].rjust(digits, '0')

def generate_totp(key, time_step=30, digits=6, digest='sha1'):
    return generate_hotp(key, int(time.time() / time_step), digits, digest)

def get_option(config, section, option):
    result = None

    # Check the given section for the option
    if config.has_section(section) and config.has_option(section, option):
        result = config[section][option]
    
    # Check the default section for the option
    if result is None and config.has_section('default') and config.has_option('default', option):
        result = config['default'][option]

    return result

parser = argparse.ArgumentParser(description='Update your AWS CLI Token')
parser.add_argument('--token', help='token from your MFA device')
parser.add_argument('--profile', help='aws profile to store the session token', default=os.getenv('AWS_PROFILE'))
parser.add_argument('--arn', help='AWS ARN from the IAM console (Security credentials -> Assigned MFA device).')
parser.add_argument('--credential-path', help='path to the aws credentials file', default=os.path.expanduser('~/.aws/credentials'))
parser.add_argument('--config-path', help='path to the aws config file', default=os.path.expanduser('~/.aws/config'))
parser.add_argument('--duration', help='length of time in seconds that tokens are valid for')
args = parser.parse_args()

if args.profile is None:
    parser.error('Expecting --profile or profile set in environment AWS_PROFILE. e.g. "stage"')

creds = configparser.ConfigParser()
creds.read(args.credential_path)
cfg = configparser.ConfigParser()
cfg.read(args.config_path)

# If the section does not exit in the credentials file, add it
if 'default' not in creds.sections():
    parser.error('Invalid profile. default section not found in ~/.aws/credentials')

if 'profile ' + args.profile not in cfg.sections():
    parser.error('Invalid profile. Section not found in ~/.aws/config')

# If the section does not exit in the credentials file, add it
if args.profile not in creds.sections():
    creds.add_section(args.profile)

if args.arn is None:
    args.arn = get_option(creds, args.profile, 'aws_arn_mfa')

    if args.arn is None:
        parser.error('ARN is not provided. Specify via --arn or set aws_arn_mfa in AWS credentials file')

if args.token is None:
    secret = get_option(creds, args.profile, 'aws_mfa_secret')

    if secret is None:
        parser.error('Token is not provided. Specify via --token or set aws_mfa_secret in AWS credentials file')

    args.token = generate_totp(secret)

if args.duration is None:
    args.duration = get_option(cfg, 'profile ' + args.profile, 'aws_token_duration')

    # Default to max of 1 hour if not specified anywhere (this is the default for new AWS accounts, so minimises issues when setting up with a new account)
    if args.duration is None:
        args.duration = '3600'

assume_account = cfg['profile ' + args.profile]['account']
assume_role = cfg['profile ' + args.profile]['role']

# Get the username for the default profile
result = subprocess.run(['aws', 'iam', 'get-user', '--profile', 'default', '--output', 'text', '--query', 'User.UserName'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

if result.returncode != 0:
    parser.error(result.stderr.decode('utf-8').strip(os.linesep))

username = result.stdout.decode('utf-8').strip(os.linesep)

# Generate the session token from the default profile based on the environment. We do not want to overwrite these profiles as we wouldn't
# be able to generate another token
result = subprocess.run(['aws', 'sts', 'assume-role', '--role-arn', 'arn:aws:iam::' + assume_account + ':role/' + assume_role, '--role-session-name', username, '--profile', 'default', '--serial-number', args.arn, '--token-code', args.token, '--duration-seconds', args.duration], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

if result.returncode != 0:
    parser.error(result.stderr.decode('utf-8').strip(os.linesep))

credentials = json.loads(result.stdout.decode('utf-8'))['Credentials']
creds[args.profile]['aws_access_key_id'] = credentials['AccessKeyId']
creds[args.profile]['aws_secret_access_key'] = credentials['SecretAccessKey']
creds[args.profile]['aws_session_token'] = credentials['SessionToken']

# Save the changes back to the file
with open(args.credential_path, 'w') as configFile:
    creds.write(configFile)

print('Saved {} credentials to {}'.format(args.profile, args.credential_path))